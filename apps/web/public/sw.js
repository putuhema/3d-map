import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
	CacheFirst,
	NetworkFirst,
	StaleWhileRevalidate,
} from "workbox-strategies";

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST);

// Cache page navigations (html) with a Network First strategy
registerRoute(
	// Check to see if the request is a navigation to a new page
	({ request }) => request.mode === "navigate",
	// Use a Network First caching strategy
	new NetworkFirst({
		// Use a custom cache name
		cacheName: "pages-cache",
		// Fallback to offline page
		fallback: "/offline.html",
	}),
);

// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy
registerRoute(
	// Check to see if the request's destination is style for stylesheets, script for JavaScript, or worker for web worker
	({ request }) =>
		request.destination === "style" ||
		request.destination === "script" ||
		request.destination === "worker",
	// Use a Stale While Revalidate caching strategy
	new StaleWhileRevalidate({
		// Use a custom cache name
		cacheName: "assets-cache",
	}),
);

// Cache images with a Cache First strategy
registerRoute(
	// Check to see if the request's destination is style for an image
	({ request }) => request.destination === "image",
	// Use a Cache First caching strategy
	new CacheFirst({
		// Use a custom cache name
		cacheName: "images-cache",
		plugins: [
			// Don't cache more than 50 items, and expire them after 30 days
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
			}),
		],
	}),
);

// Cache 3D models and other static assets
registerRoute(
	({ request }) =>
		request.url.includes(".glb") ||
		request.url.includes(".gltf") ||
		request.url.includes("/models/") ||
		request.url.includes("/rooms/"),
	new CacheFirst({
		cacheName: "models-cache",
		plugins: [
			new ExpirationPlugin({
				maxEntries: 100,
				maxAgeSeconds: 60 * 24 * 60 * 60, // 60 Days
			}),
		],
	}),
);

// Cache API requests with Network First strategy
registerRoute(
	({ request }) => request.url.includes("/api/"),
	new NetworkFirst({
		cacheName: "api-cache",
		plugins: [
			new ExpirationPlugin({
				maxEntries: 50,
				maxAgeSeconds: 5 * 60, // 5 minutes
			}),
		],
	}),
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
	if (event.data && event.data.type === "SKIP_WAITING") {
		self.skipWaiting();
	}
});

// Handle offline scenarios
self.addEventListener("fetch", (event) => {
	if (event.request.mode === "navigate") {
		event.respondWith(
			fetch(event.request).catch(() => {
				return caches.match("/offline.html");
			}),
		);
	}
});
